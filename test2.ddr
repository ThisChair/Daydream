[Int] l = [2,3,4,5];

for Int n in l if n % 2 == 2
dream
    x = x + 1;
wake

Int x = 0;

for Int i from 1 to 1000 with i * 2 if i % 9 == 0 || i % 5 == 0
dream
    x = x + i;
wake

Int x = 1;

while x < 1000
dream
    x = x * 2;
wake

func (Int, Int -> Int) min(x,y)
dream
    if x < y then
    dream
        return x;
    wake else
    dream
        return y;
    wake
wake

func (Int -> Int) fact(n)
dream
    if n <= 1 then return 1;
    return n * fact(n-1);
wake

func (Tree -> Int) rightmostLeaf(t)
dream
case t of
    node dream
        return rightmostLeaf(t.right);
    wake
    leaf dream
        return t.info;
    wake;
wake

data Tree
dream
    Node(Int info, Tree left, Tree right);
    Leaf(Int info);
wake
